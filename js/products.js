import { kiemTraRong } from "./validate.js";
var dssp = [];

var selectedId = null;

function renderProductionList(productArr) {
  dssp.length = 0;

  var contentHTML = "";
  for (var i = 0; i < productArr.length; i++) {
    var product = productArr[i];
    dssp.push(product);
    var trString = `<tr>
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>${product.price}</td>
            <td>${product.image}</td>
            <td>${product.type}</td>
            <td>${product.quality}</td>
            <td>
                <button onclick="deleteProduct(${product.id})" class="btn btn-warning  ">Delete</button>
                <button onclick="editProduct(${product.id})" class="btn btn-danger">Edit</button>
            </td>
        </tr>`;
    contentHTML += trString;
  }
  document.getElementById("tblDanhSachSP").innerHTML = contentHTML;
}

var nextProductId = 1;
let originalProductList = [];

axios({
  url: "https://65118cdc829fa0248e4053c5.mockapi.io/product",
  method: "GET",
})
  .then((res) => {
    renderProductionList(res.data);

    let maxId = 0;
    res.data.forEach((product) => {
      const productId = parseInt(product.id);
      if (!isNaN(productId) && productId > maxId) {
        maxId = productId;
      }
    });

    originalProductList = res.data;

    // C·∫≠p nh·∫≠t nextProductId th√†nh gi√° tr·ªã l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c + 1
    nextProductId = maxId + 1;
  })
  .catch((err) => {
    console.log(err);
  });

// g·ªçi api l·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang c√≥ t·ª´ sever
axios({
  url: "https://65118cdc829fa0248e4053c5.mockapi.io/product",
  method: "GET",
})
  .then((res) => {
    //api tr·∫£ v·ªÅ th√†nh c√¥ng
    renderProductionList(res.data);

    // T√¨m gi√° tr·ªã ID l·ªõn nh·∫•t trong danh s√°ch ƒë√£ c√≥
    let maxId = 0;
    res.data.forEach((product) => {
      const productId = parseInt(product.id);
      if (!isNaN(productId) && productId > maxId) {
        maxId = productId;
      }
    });

    // C·∫≠p nh·∫≠t nextProductId th√†nh gi√° tr·ªã l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c + 1
    nextProductId = maxId + 1;
  })
  .catch((err) => {
    console.log(err);
  });

function deleteProduct(id) {
  axios({
    url: `https://65118cdc829fa0248e4053c5.mockapi.io/product/${id}`,
    method: "DELETE",
  })
    .then(function (res) {
      console.log("üòä ~ res: x√≥a th√†nh c√¥ng", res);
      fetchFoodList();
      //  g·ªçi l·∫°i api l·∫•y danh s√°ch m·ªõi nh·∫•t t·ª´ sever sau khi x√≥a th√†nh c√¥ng
    })
    .catch(function (res) {
      console.log("x√≥a th·∫•t b·∫°i");
    });
}

window.deleteProduct = deleteProduct;

async function addProduct() {
  try {
    var newProduct = getDataForm();

    // T·∫°o ID cho s·∫£n ph·∫©m m·ªõi v√† c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng kh√°c
    newProduct.id = nextProductId.toString(); // T·∫°o ID cho s·∫£n ph·∫©m m·ªõi
    newProduct.screen = ""; // Th√™m tr∆∞·ªùng screen (m·ª•c n√†y c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi gi√° tr·ªã th√≠ch h·ª£p)

    //validate new product
    var isValid =
      kiemTraRong(newProduct.name, "TenSP") &&
      kiemTraRong(newProduct.img, "HinhSP") &&
      kiemTraRong(newProduct.price, "GiaSP") &&
      kiemTraRong(newProduct.type, "LoaiSP");
    kiemTraRong(newProduct.quality, "soLuongSP");

    if (!isValid) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");

      return;
    }

    // Th·ª±c hi·ªán th√™m s·∫£n ph·∫©m m·ªõi v√†o danh s√°ch
    dssp.push(newProduct);

    // S·∫Øp x·∫øp l·∫°i danh s√°ch s·∫£n ph·∫©m theo id
    dssp.sort((a, b) => parseInt(a.id) - parseInt(b.id));

    const response = await axios.post(
      "https://65118cdc829fa0248e4053c5.mockapi.io/product",
      newProduct
    );
    console.log("Th√™m th√†nh c√¥ng", response);

    fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi th√™m
  } catch (error) {
    console.error("Th√™m th·∫•t b·∫°i", error);
    alert("Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message);
  }
  closeModal();
}
window.addProduct = addProduct;

console.log("üöÄ ~ dssp:", dssp);

function editProduct(id) {
  selectedId = id;
  axios({
    url: `https://65118cdc829fa0248e4053c5.mockapi.io/product/${id}`,
    method: "GET",
  })
    .then((res) => {
      console.log(res);
      $("#myModal").modal("show");
      // ƒê∆∞a data t·ª´ m√°y ch·ªß l√™n form
      showDataForm(res.data);
    })
    .catch((err) => {
      console.log(err);
    });
}
window.editProduct = editProduct;

async function updateProduct(id) {
  try {
    // L·∫•y data v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ng∆∞·ªùi d√πng t·ª´ form
    var updateProductData = getDataForm();
    const response = await axios.put(
      `https://65118cdc829fa0248e4053c5.mockapi.io/product/${selectedId}`,
      updateProductData
    );
    console.log("S·ª≠a th√†nh c√¥ng", response);

    fetchFoodList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi c·∫≠p nh·∫≠t
  } catch (error) {
    console.error("S·ª≠a th·∫•t b·∫°i", error);
    alert("S·ª≠a s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message);
  }
  closeModal();
}
window.updateProduct = updateProduct;

async function fetchFoodList() {
  try {
    const response = await axios.get(
      "https://65118cdc829fa0248e4053c5.mockapi.io/product"
    );
    renderProductionList(response.data);
    originalProductList = response.data; // L∆∞u tr·ªØ danh s√°ch ban ƒë·∫ßu
    renderProductionList(originalProductList);
  } catch (err) {
    console.log(err);
  }
}
fetchFoodList();
//---------------------T√¨m ki·∫øm----------------------------------
function searchButton() {
  var keyword = document.getElementById("searchInput").value.toLowerCase();
  var results = searchProductsByKeyword(keyword);
  renderProductionList(results);
}
window.searchButton = searchButton;

function searchProductsByKeyword(keyword) {
  // T·∫°o m·ªôt m·∫£ng m·ªõi ƒë·ªÉ l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a
  var searchResults = [];

  // S·ª≠ d·ª•ng danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu ƒë·ªÉ t√¨m ki·∫øm
  var productListToSearch = originalProductList;

  // L·∫∑p qua danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu ƒë·ªÉ t√¨m ki·∫øm
  for (var i = 0; i < productListToSearch.length; i++) {
    var product = productListToSearch[i];
    if (product.name.toLowerCase().includes(keyword)) {
      searchResults.push(product);
    }
  }

  return searchResults;
}

// S·∫Øp x·∫øp

let sortedProducts = [];

//  s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m
function sortProducts() {
  var sortSelect = document.getElementById("sortSelect");
  var sortOrder = sortSelect.value;

  if (sortOrder === "") {
    renderProductionList(originalProductList);

    return;
  }

  if (sortOrder === "asc") {
    // S·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° tƒÉng d·∫ßn
    sortedProducts = dssp.slice().sort((a, b) => {
      const priceA = parseFloat(a.price);
      const priceB = parseFloat(b.price);
      return priceA - priceB;
    });
    console.log("üòä ~ sortedProducts:", sortedProducts);
  }

  if (sortOrder === "desc") {
    // S·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo gi√° gi·∫£m d·∫ßn
    sortedProducts = dssp.slice().sort((a, b) => {
      const priceA = parseFloat(a.price);
      const priceB = parseFloat(b.price);
      return priceB - priceA;
    });
  }
  // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
  renderProductionList(sortedProducts);
}
window.sortProducts = sortProducts;
